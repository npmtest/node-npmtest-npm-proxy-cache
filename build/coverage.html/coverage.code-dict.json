{"/home/travis/build/npmtest/node-npmtest-npm-proxy-cache/test.js":"/* istanbul instrument in package npmtest_npm_proxy_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-proxy-cache/lib.npmtest_npm_proxy_cache.js":"/* istanbul instrument in package npmtest_npm_proxy_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_proxy_cache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_proxy_cache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-proxy-cache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-proxy-cache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_proxy_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_proxy_cache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_proxy_cache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_proxy_cache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_proxy_cache.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_proxy_cache.__dirname + '/lib.npmtest_npm_proxy_cache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-proxy-cache/node_modules/npm-proxy-cache/index.js":"'use strict';\nmodule.exports = require('./lib/proxy');\n","/home/travis/build/npmtest/node-npmtest-npm-proxy-cache/node_modules/npm-proxy-cache/lib/proxy.js":"'use strict';\nvar http = require('http'),\n  net = require('net'),\n  https = require('https'),\n  fs = require('fs'),\n  os = require('os'),\n  url = require('url'),\n  path = require('path'),\n  request = require('request'),\n  log4js = require('log4js');\n\nvar Cache = require('./cache');\n\n\n// To avoid 'DEPTH_ZERO_SELF_SIGNED_CERT' error on some setups\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nexports.log = null;\n\nexports.cache = null;\n\nexports.opts = {};\n\n// Port or socket path of internal MITM server.\nvar mitmAddress;\n\n// Random header to prevent sending requests in a cycle\nvar cycleCheckHeader = 'x-npm-proxy-cache-' + Math.round(Math.random() * 10000);\n\nexports.powerup = function(opts) {\n\n  exports.opts = opts || {};\n\n  var options = {\n    key: fs.readFileSync(path.join(__dirname, '/../cert/dummy.key'), 'utf8'),\n    cert: fs.readFileSync(path.join(__dirname, '/../cert/dummy.crt'), 'utf8')\n  };\n\n  this.cache = new Cache({\n    path: opts.storage, ttl: opts.ttl, friendlyNames: opts.friendlyNames\n  });\n\n  this.log = log4js.getLogger('proxy');\n  this.log.setLevel(opts.verbose ? 'DEBUG' : 'INFO');\n\n  if (opts.logPath) {\n    log4js.loadAppender('file');\n    log4js.addAppender(log4js.appenders.file(opts.logPath), 'proxy');\n  }\n\n  // Fake https server aka MITM\n  var mitm = https.createServer(options, exports.httpHandler);\n\n  // NOTE: for windows platform user has to specify port, since\n  // it does not support unix sockets.\n  if (/^win/i.test(process.platform) && !isNumeric(opts.internalPort)) {\n    console.error('Error: On Windows platform you have to specify internal port,\\n'\n      + 'for example `--internal-port 8081`.');\n    process.exit(1);\n  }\n  if (opts.internalPort) {\n    mitmAddress = opts.internalPort;\n\n  } else {\n    mitmAddress = path.join(os.tmpdir(), 'mitm.sock');\n\n    // Cleanup MITM socket for unix platforms\n    if (fs.existsSync(mitmAddress))\n      fs.unlinkSync(mitmAddress);\n  }\n\n  mitm.listen(mitmAddress);\n\n  // start HTTP server with custom request handler callback function\n  var server = http.createServer(exports.httpHandler).listen(opts.port, opts.host, function(err) {\n    if (err) throw err;\n    exports.log.info('Listening on %s:%s [%d]', opts.host, opts.port, process.pid);\n  });\n\n  // add handler for HTTPS (which issues a CONNECT to the proxy)\n  server.addListener('connect', this.httpsHandler);\n};\n\n\nexports.httpHandler = function(req, res) {\n  var cache = exports.cache,\n    log = exports.log,\n    path = url.parse(req.url).path,\n    schema = req.client.pair || req.connection.encrypted ? 'https' : 'http',\n    dest = schema + '://' + req.headers['host'] + path;\n\n  if (req.headers[cycleCheckHeader]) {\n    res.writeHead(502);\n    res.end('Sending requests to myself. Stopping to prevent cycles.');\n    return;\n  }\n\n  var params = {\n    headers: {},\n    rejectUnauthorized: false,\n    url: dest\n  };\n\n  params.headers[cycleCheckHeader] = 1;\n\n  // Carry following headers down to dest npm repository.\n  var carryHeaders = ['authorization', 'version', 'referer', 'npm-session', 'user-agent'];\n  carryHeaders.forEach(function(name) {\n    params.headers[name] = req.headers[name];\n  });\n\n  if (exports.opts.proxy)\n    params.proxy = exports.opts.proxy;\n\n\n  // Skipping other than GET methods\n  // Skipping metadata requests when configured\n  if (\n    req.method !== 'GET' ||\n    (exports.opts.metadataExcluded && req.headers['accept'] === 'application/json')\n  )\n    return bypass(req, res, params);\n\n\n  cache.meta(dest, function(err, meta) {\n    if (err)\n      throw err;\n\n    if (meta.status === Cache.FRESH)\n      return respondWithCache(dest, cache, meta, res);\n\n    var p = cache.getPath(dest);\n    log.debug('Cache file:', p.rel);\n\n    log.warn('direct', dest);\n\n    var onResponse = function(err, response) {\n      // don't save responses with codes other than 200\n      if (!err && response.statusCode === 200) {\n        var file = cache.write(dest);\n        r.pipe(file).on('finish', function() {\n          cache.meta(dest, function(err, meta) {\n            if (err)\n              throw err;\n            respondWithCache(dest, cache, meta, res);\n          });\n        });\n      } else {\n        // serve expired cache if user wants so\n        if (exports.opts.expired && meta.status === Cache.EXPIRED)\n          return respondWithCache(dest, cache, meta, res);\n\n        log.error('An error occcured: \"%s\", status code \"%s\"',\n          err ? err.message : 'Unknown',\n          response ? response.statusCode : 0\n        );\n\n        // clean old cache\n        if (meta.status !== Cache.NOT_FOUND)\n          cache.unlink(dest);\n\n        res.end(err ? err.toString() : 'Status ' + response.statusCode + ' returned');\n      }\n    };\n\n    var r = request(params);\n    r.on('response', onResponse.bind(null, null));\n    r.on('error', onResponse.bind(null));\n    r.on('end', function() {\n      log.debug('end');\n    });\n  });\n};\n\n\nexports.httpsHandler = function(request, socketRequest, bodyhead) {\n  var log = exports.log,\n    httpVersion = request['httpVersion'];\n\n  log.debug('  = will connect to socket (or port) \"%s\"', mitmAddress);\n\n  // set up TCP connection\n  var proxySocket = new net.Socket();\n  proxySocket.connect(mitmAddress, function() {\n    log.debug('< connected to socket (or port) \"%s\"', mitmAddress);\n    log.debug('> writing head of length %d', bodyhead.length);\n\n    proxySocket.write(bodyhead);\n\n    // tell the caller the connection was successfully established\n    socketRequest.write('HTTP/' + httpVersion + ' 200 Connection established\\r\\n\\r\\n');\n  });\n\n  proxySocket.on('data', function(chunk) {\n    log.debug('< data length = %d', chunk.length);\n    socketRequest.write(chunk);\n  });\n\n  proxySocket.on('end', function() {\n    log.debug('< end');\n    socketRequest.end();\n  });\n\n  socketRequest.on('data', function(chunk) {\n    log.debug('> data length = %d', chunk.length);\n    proxySocket.write(chunk);\n  });\n\n  socketRequest.on('end', function() {\n    log.debug('> end');\n    proxySocket.end();\n  });\n\n  proxySocket.on('error', function(err) {\n    socketRequest.write('HTTP/' + httpVersion + ' 500 Connection error\\r\\n\\r\\n');\n    log.error('< ERR: %s', err.toString());\n    socketRequest.end();\n  });\n\n  socketRequest.on('error', function(err) {\n    log.error('> ERR: %s', err.toString());\n    proxySocket.end();\n  });\n};\n\n\nfunction bypass(req, res, params) {\n  var length = parseInt(req.headers['content-length']);\n  var log = exports.log;\n\n  var onEnd = function(params, res) {\n    return request(params)\n      .on('error', function(err) {\n        log.error('bypass', err);\n      })\n      .pipe(res, { end: false });\n  };\n\n  if (!isFinite(length)) {\n    onEnd(params, res);\n    return;\n  }\n\n  var raw = new Buffer(length),\n    pointer = 0;\n\n  req.on('data', function(chunk) {\n    chunk.copy(raw, pointer);\n    pointer += chunk.length;\n  });\n\n  req.on('end', function() {\n    params.method = req.method;\n    if (raw.length > 0) {\n      params.body = raw;\n    }\n    params.headers = {\n      'Content-Type': req.headers['content-type']\n    };\n    onEnd(params, res);\n  });\n}\n\n\nfunction respondWithCache(dest, cache, meta, res) {\n  var log = exports.log;\n  log.info('cache', dest);\n  log.debug('size: %s, type: \"%s\", ctime: %d', meta.size, meta.type, meta.ctime.valueOf());\n  res.setHeader('Content-Length', meta.size);\n  res.setHeader('Content-Type', meta.type);\n  res.setHeader('Connection', 'keep-alive');\n  res.setHeader('X-Cache-Hit', 'true');\n  return cache.read(dest).pipe(res);\n}\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n","/home/travis/build/npmtest/node-npmtest-npm-proxy-cache/node_modules/npm-proxy-cache/lib/cache.js":"'use strict';\nvar path = require('path'),\n  fs = require('fs'),\n  crypto = require('crypto'),\n  mkdirp = require('mkdirp');\n\n\nfunction Cache(opts) {\n  this.opts = opts || {};\n  this.opts.ttl = (opts.ttl || 1800) * 1000;\n  this.opts.friendlyNames = opts.friendlyNames;\n  this.opts.path = opts.path || path.join(__dirname, '/../cache');\n\n  this.locks = {};\n\n\n  this.stat = function(fullpath) {\n    if (!fs.existsSync(fullpath))\n      return {status: Cache.NOT_FOUND};\n\n    var stat = fs.lstatSync(fullpath);\n    stat.type = path.extname(fullpath) ? 'application/octet-stream' : 'application/json';\n    stat.status = (Date.now() < stat.ctime.valueOf() + this.opts.ttl)\n      ? Cache.FRESH\n      : Cache.EXPIRED;\n\n    return stat;\n  };\n\n\n  this.meta = function(key, cb) {\n    var self = this,\n      fullpath = this.getPath(key).full,\n      stat = this.stat(fullpath);\n\n    if (stat.status === Cache.NOT_FOUND || stat.status === Cache.EXPIRED)\n      return cb(null, stat);\n\n    if (!this.locks[key])\n      return cb(null, stat);\n\n    // wait until lock releases\n    // generally when file is locked means that process is writing to file right now\n    (function wait() {\n      if (self.locks[key])\n        return setTimeout(wait, 100);\n\n      // need to acquire new fstat, since file has been changed\n      cb(null, self.stat(fullpath));\n    })();\n  };\n\n\n  this.read = function(key) {\n    var path = this.getPath(key),\n      file = fs.createReadStream(path.full);\n    file.on('finish', function() {\n      file.close();\n    });\n\n    return file;\n  };\n\n\n  this.write = function(key) {\n    var locks = this.locks,\n      path = this.getPath(key);\n\n    // create lock\n    locks[key] = true;\n\n    mkdirp.sync(path.dir, 511); // 511 is decimal equvivalent of 0777\n\n    var file = fs.createWriteStream(path.full);\n    file.on('finish', function() {\n      // release lock\n      delete (locks[key]);\n      file.close();\n    });\n\n    return file;\n  };\n\n\n  this.getPath = function(key) {\n    var file, base, chunks, dir;\n    if (this.opts.friendlyNames) {\n      // The key is the URL; the last part is the module name and if\n      // the last version is requested, it lacks the file extension\n      file = path.basename(key);\n      // Cut the version suffix and file extension; only module name\n      // should make the directory, make sure that there is no dot as\n      // directory name coming from the first characters of the fike name\n      base = file.replace(/(-\\d\\.\\d.\\d)?\\.tgz/, '').replace(/\\./g, '-');\n    } else {\n      file = crypto.createHash('md5').update(key).digest('hex')\n                 .substring(0, 8) + path.extname(key);\n      base = file;\n    }\n    // Make sure that there are always 3 nested directories to avoid\n    // both file and folder at the same level (/q/q, /q/q/qq)\n    chunks = base.split('').splice(0, 3);\n    while (chunks.length < 3)\n      chunks.push('-');\n    dir = chunks.join('/');\n\n    return {\n      dir: path.join(this.opts.path, dir),\n      full: path.join(this.opts.path, dir, file),\n      file: file,\n      rel: path.join(dir, file)\n    };\n  };\n\n\n  this.unlink = function(key) {\n    delete (this.locks[key]);\n    fs.unlinkSync(this.getPath(key).full);\n  };\n\n}\n\nCache.NOT_FOUND = 0;\nCache.EXPIRED = 2;\nCache.FRESH = 4;\n\nmodule.exports = Cache;\n"}